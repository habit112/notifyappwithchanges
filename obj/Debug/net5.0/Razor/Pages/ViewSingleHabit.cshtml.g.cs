#pragma checksum "C:\Users\Vikumsri\Documents\GitHub\notifyappwithchanges\Pages\ViewSingleHabit.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "202ab65283de3f4f6c830d77c030ecbea8f965f4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(HabitApp.Pages.Pages_ViewSingleHabit), @"mvc.1.0.razor-page", @"/Pages/ViewSingleHabit.cshtml")]
namespace HabitApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Vikumsri\Documents\GitHub\notifyappwithchanges\Pages\_ViewImports.cshtml"
using HabitApp;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute("RouteTemplate", "/viewsinglehabit")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"202ab65283de3f4f6c830d77c030ecbea8f965f4", @"/Pages/ViewSingleHabit.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f0d8de3ee89885d71118c8112e0d377848ef63c3", @"/Pages/_ViewImports.cshtml")]
    public class Pages_ViewSingleHabit : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div class=""mt-5 justify-content-center align-items-center"">
   <br/>
	<div class=""card mt-5"" style=""width: 20rem; margin-left:420px"">
      <img id=""image"" src=""/Images/washHand.png"" class=""card-img-top"" alt=""..."">
      <div class=""card-body"" style=""text-align:center"">
        <h5 class=""card-title"" id=""title"">Habit Title</h5>
        <p class=""card-text"" style=""text-align:left"" id=""description"">Description.......</p>
        <div>
            <div class=""mb-3"" id=""videoBox"">
                    <label class=""form-label"" > Video Url</label>
                    <label  class=""form-label"" id=""url"" />
            </div>
                <div class=""mb-3"" id=""audiobox"">
                    <label class=""form-label"">Habit Audio</label>
                        <audio id=""myAudio"" controls=""controls"" >
                          <source id=""audio"" type=""audio/ogg"">
                        </audio>
                </div>
        </div>
        <button onclick=""redirect()"" class=""btn btn-success"" ");
            WriteLiteral(@">Go Back</button>
      </div>
    </div>
</div>


<script>

var url_string = window.location.href
var url = new URL(url_string);

    var idtext = url.searchParams.get(""hid"")
    var titleText = url.searchParams.get(""htitle"")
    var descriptiontext = url.searchParams.get(""hdescription"")
    var audiotext = window.localStorage.getItem(""audio"")
    var imagetext = window.localStorage.getItem(""imagetext"")
    var statustext = url.searchParams.get(""hstatus"")
    var pointtext = url.searchParams.get(""hpoints"")
    var videourltext = url.searchParams.get(""hvideo"")
    var redirectUrl = url.searchParams.get(""hredirect"")


    function redirect()
    {
        window.location.href = ""/"" + redirectUrl
    }

var audio = document.getElementById('myAudio');

var source = document.getElementById('audio');
source.src = audiotext

audio.load(); //call this to just preload the audio without playing
    
    if (audiotext == ""BsonNull"") {
        document.getElementById(""audiobox"").hidden");
            WriteLiteral(@" = true;
    }

    if (imagetext == ""BsonNull"")
    {
        document.getElementById(""image"").hidden = true;
    }

    if (videourltext == ""BsonNull"") {
        document.getElementById(""videoBox"").hidden = true;
    }

document.getElementById(""image"").src = imagetext;
document.getElementById(""title"").innerText = titleText;
document.getElementById(""description"").innerText = descriptiontext;
document.getElementById(""url"").innerText = videourltext;


</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<HabitApp.Pages.ViewSingleHabitModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<HabitApp.Pages.ViewSingleHabitModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<HabitApp.Pages.ViewSingleHabitModel>)PageContext?.ViewData;
        public HabitApp.Pages.ViewSingleHabitModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
